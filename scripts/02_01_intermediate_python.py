# -*- coding: utf-8 -*-
"""02-01-intermediate-python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13N-4IIGKEzniS5bRd04fqS7Qhw2Q83bB

#Intermediate Python
## 1. Matplotlib
## 2. Dictionaries & Pandas
## 3. Logic, Control Flow and Filtering
## 4. Loops
## 5. Case Study: Hacker Statistics

## 1. Matplotlib
"""

year = list(range(1950, 2101))
print(year)

# 1.1 Basic plots with Matplotlib

# Line plot (1)
import numpy as np

year = list(range(1950, 2101))
pop=[2.53,2.57,2.62,2.67,2.71,2.76,2.81,2.86,2.92,2.97,
3.03,3.08,3.14,3.2,3.26,3.33,3.4,3.47,3.54,3.62,3.69,3.77,3.84,3.92,
4.0,4.07,4.15,4.22,4.3,4.37,4.45,4.53,4.61,4.69,4.78,4.86,4.95,
5.05,5.14,5.23,5.32,5.41,5.49,5.58,5.66,5.74,5.82,5.9,5.98,
6.05,6.13,6.2,6.28,6.36,6.44,6.51,6.59,6.67,6.75,6.83,6.92,
7.0,7.08,7.16,7.24,7.32,7.4,7.48,7.56,7.64,7.72,7.79,7.87,7.94,
8.01,8.08,8.15,8.22,8.29,8.36,8.42,8.49,8.56,8.62,8.68,8.74,8.8,8.86,8.92,8.98,
9.04,9.09,9.15,9.2,9.26,9.31,9.36,9.41,9.46,9.5,9.55,9.6,9.64,9.68,9.73,9.77,9.81,9.85,9.88,9.92,9.96,9.99,
10.03,10.06,10.09,10.13,10.16,10.19,10.22,10.25,10.28,10.31,10.33,10.36,10.38,10.41,10.43,10.46,10.48,10.5,10.52,10.55,10.57,10.59,10.61,10.63,10.65,10.66,10.68,10.7,10.72,10.73,10.75,10.77,10.78,10.79,10.81,10.82,10.83,10.84,10.85]

# Print the last item from year and pop
print(year[-1], pop[-1])

# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Make a line plot: year on the x-axis, pop on the y-axis
plt.plot(year, pop)

plt.axhline(y=10, color='r')
plt.axvline(x=2060, color='r')

# Display the plot with plt.show()
plt.show()

"""Line Plot (2): Interpretation

Based on the plot, in approximately what year will there be more than ten billion human beings on this planet?
- [ ] 2040
- [x] 2060
- [ ] 2085
- [ ] 2095
"""

# Line plot (3)

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
gdp_cap = list(df.gdp_cap)
life_exp = list(df.life_exp)

# Print the last item of gdp_cap and life_exp
print(gdp_cap[-1], life_exp[-1])

# Make a line plot, gdp_cap on the x-axis, life_exp on the y-axis
plt.plot(gdp_cap, life_exp)

# Display the plot
plt.show()

# Scatter Plot (1)

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
gdp_cap = list(df.gdp_cap)
life_exp = list(df.life_exp)

# Change the line plot below to a scatter plot
plt.scatter(gdp_cap, life_exp)

# Put the x-axis on a logarithmic scale
plt.xscale('log')

# Show plot
plt.show()

# Scatter plot (2)

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
pop = list(df.population)
life_exp = list(df.life_exp)

# Import package
import matplotlib.pyplot as plt

# Build Scatter plot
plt.scatter(pop, life_exp)

# Show plot
plt.show()

# 1.2 Histogram

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
life_exp = list(df.life_exp)

# Build a histogram (1)

# Create histogram of life_exp data
plt.hist(life_exp)

# Display histogram
plt.show()

# Build a histogram (2): bins

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
life_exp = list(df.life_exp)

# Build histogram with 5 bins
plt.hist(life_exp, 5)

# Show and clean up plot
plt.show()
plt.clf()

# Build histogram with 20 bins
plt.hist(life_exp, 20)

# Show and clean up again
plt.show()
plt.clf()

# Build a histogram (3): compare

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
life_exp = list(df.life_exp)

life_exp1950 = [28.8,55.23,43.08,30.02,62.48,69.12,66.8,50.94,37.48,68.0,38.22,
  40.41,53.82,47.62,50.92,59.6,31.98,39.03,39.42,38.52,68.75,35.46,38.09,54.74,
  44.0,50.64,40.72,39.14,42.11,57.21,40.48,61.21,59.42,66.87,70.78,34.81,45.93,
  48.36,41.89,45.26,34.48,35.93,34.08,66.55,67.41,37.0,30.0,67.5,43.15,65.86,
  42.02,33.61,32.5,37.58,41.91,60.96,64.03,72.49,37.37,37.47,44.87,45.32,66.91,
  65.39,65.94,58.53,63.03,43.16,42.27,50.06,47.45,55.56,55.93,42.14,38.48,42.72,
  36.68,36.26,48.46,33.68,40.54,50.99,50.79,42.24,59.16,42.87,31.29,36.32,41.72,
  36.16,72.13,69.39,42.31,37.44,36.32,72.67,37.58,43.44,55.19,62.65,43.9,47.75,
  61.31,59.82,64.28,52.72,61.05,40.0,46.47,39.88,37.28,58.0,30.33,60.4,64.36,
  65.57,32.98,45.01,64.94,57.59,38.64,41.41,71.86,69.62,45.88,58.5,41.22,50.85,
  38.6,59.1,44.6,43.58,39.98,69.18,68.44,66.07,55.09,40.41,43.16,32.55,42.04,48.45]

# Histogram of life_exp, 15 bins
plt.hist(life_exp, 15)

# Show and clear plot
plt.show()
plt.clf()

# Histogram of life_exp1950, 15 bins
plt.hist(life_exp1950, 15)

# Show and clear plot again
plt.show()
plt.clf()

"""- Choose the right plot (1)

You're a professor teaching Data Science with Python, and you want to visually assess if the grades on your exam follow a particular distribution. Which plot do you use?

- [ ] Line plot
- [ ] Scatter plot
- [x] Histogram

- Choose the right plot (2)

You're a professor in Data Analytics with Python, and you want to visually assess if longer answers on exam questions lead to higher grades. Which plot do you use?

- [ ] Line plot
- [x] Scatter plot
- [ ] Histogram
"""

# 1.3 Customization

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
gdp_cap = list(df.gdp_cap)
life_exp = list(df.life_exp)

# Labels

# Basic scatter plot, log scale
plt.scatter(gdp_cap, life_exp)
plt.xscale('log') 

# Strings
xlab = 'GDP per Capita [in USD]'
ylab = 'Life Expectancy [in years]'
title = 'World Development in 2007'

# Add axis labels
plt.xlabel(xlab)
plt.ylabel(ylab)

# Add title
plt.title(title)

# After customizing, display the plot
plt.show()

# Ticks

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
gdp_cap = list(df.gdp_cap)
life_exp = list(df.life_exp)

# Scatter plot
plt.scatter(gdp_cap, life_exp)

# Previous customizations
plt.xscale('log') 
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')

# Definition of tick_val and tick_lab
tick_val = [1000, 10000, 100000]
tick_lab = ['1k', '10k', '100k']

# Adapt the ticks on the x-axis
plt.xticks(tick_val, tick_lab)

# After customizing, display the plot
plt.show()

# Sizes

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
pop = list(df.population)
gdp_cap = list(df.gdp_cap)
life_exp = list(df.life_exp)

# Import numpy as np
import numpy as np

# Store pop as a numpy array: np_pop
np_pop = np.array(pop)
np_pop = np_pop / 10000000.0

# Double np_pop
np_pop = np_pop * 2

# Update: set s argument to np_pop
plt.scatter(gdp_cap, life_exp, s = np_pop)

# Previous customizations
plt.xscale('log') 
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')
plt.xticks([1000, 10000, 100000],['1k', '10k', '100k'])

# Display the plot
plt.show()

# Colors

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
pop = list(df.population)
gdp_cap = list(df.gdp_cap)
life_exp = list(df.life_exp)
col = ['red','green','blue','blue','yellow','black','green','red','red','green',
  'blue','yellow','green','blue','yellow','green','blue','blue','red','blue',
  'yellow','blue','blue','yellow','red','yellow','blue','blue','blue','yellow',
  'blue','green','yellow','green','green','blue','yellow','yellow','blue',
  'yellow','blue','blue','blue','green','green','blue','blue','green','blue',
  'green','yellow','blue','blue','yellow','yellow','red','green','green','red',
  'red','red','red','green','red','green','yellow','red','red','blue','red',
  'red','red','red','blue','blue','blue','blue','blue','red','blue','blue',
  'blue','yellow','red','green','blue','blue','red','blue','red','green',
  'black','yellow','blue','blue','green','red','red','yellow','yellow',
  'yellow','red','green','green','yellow','blue','green','blue','blue','red',
  'blue','green','blue','red','green','green','blue','blue','green','red',
  'blue','blue','green','green','red','red','blue','red','blue','yellow',
  'blue','green','blue','green','yellow','yellow','yellow','red','red','red',
  'blue','blue']

np_pop = np.array(pop)
np_pop = np_pop / 10000000.0

# Specify c and alpha inside plt.scatter()
plt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = col, alpha = 0.8)

# Previous customizations
plt.xscale('log') 
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')
plt.xticks([1000,10000,100000], ['1k','10k','100k'])

# Show the plot
plt.show()

# Additional Customizations

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/gapminder.csv'
df = pd.read_csv(fname)
pop = list(df.population)
gdp_cap = list(df.gdp_cap)
life_exp = list(df.life_exp)
col = ['red','green','blue','blue','yellow','black','green','red','red','green',
  'blue','yellow','green','blue','yellow','green','blue','blue','red','blue',
  'yellow','blue','blue','yellow','red','yellow','blue','blue','blue','yellow',
  'blue','green','yellow','green','green','blue','yellow','yellow','blue',
  'yellow','blue','blue','blue','green','green','blue','blue','green','blue',
  'green','yellow','blue','blue','yellow','yellow','red','green','green','red',
  'red','red','red','green','red','green','yellow','red','red','blue','red',
  'red','red','red','blue','blue','blue','blue','blue','red','blue','blue',
  'blue','yellow','red','green','blue','blue','red','blue','red','green',
  'black','yellow','blue','blue','green','red','red','yellow','yellow',
  'yellow','red','green','green','yellow','blue','green','blue','blue','red',
  'blue','green','blue','red','green','green','blue','blue','green','red',
  'blue','blue','green','green','red','red','blue','red','blue','yellow',
  'blue','green','blue','green','yellow','yellow','yellow','red','red','red',
  'blue','blue']

np_pop = np.array(pop)
np_pop = np_pop / 10000000.0

# Scatter plot
plt.scatter(x = gdp_cap, y = life_exp, s = np_pop * 2, c = col, alpha = 0.8)

# Previous customizations
plt.xscale('log') 
plt.xlabel('GDP per Capita [in USD]')
plt.ylabel('Life Expectancy [in years]')
plt.title('World Development in 2007')
plt.xticks([1000,10000,100000], ['1k','10k','100k'])

# Additional customizations
plt.text(1550, 71, 'India')
plt.text(5700, 80, 'China')

# Add grid() call
plt.grid(True)

# Show the plot
plt.show()

"""- Interpretation

If you have a look at your colorful plot, it's clear that people live longer in countries with a higher GDP per capita. No high income countries have really short life expectancy, and no low income countries have very long life expectancy. Still, there is a huge difference in life expectancy between countries on the same income level. Most people live in middle income countries where difference in lifespan is huge between countries; depending on how income is distributed and how it is used.

What can you say about the plot?

- [x] The countries in blue, corresponding to Africa, have both low life expectancy and a low GDP per capita.
- [ ] There is a negative correlation between GDP per capita and life expectancy.
- [ ] China has both a lower GDP per capita and lower life expectancy compared to India.

## 2. Dictionaries & Pandas
"""

# 2.1 Dictionaries, Part 1

# Motivation for dictionaries

# Definition of countries and capital
countries = ['spain', 'france', 'germany', 'norway']
capitals = ['madrid', 'paris', 'berlin', 'oslo']

# Get index of 'germany': ind_ger
ind_ger = countries.index('germany')

# Use ind_ger to print out capital of Germany
print(capitals[ind_ger])

# Create dictionary

# Definition of countries and capital
countries = ['spain', 'france', 'germany', 'norway']
capitals = ['madrid', 'paris', 'berlin', 'oslo']

# From string in countries and capitals, create dictionary europe
europe = { 'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

# Print europe
print(europe)

# Access dictionary

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

# Print out the keys in europe
print(europe.keys())

# Print out value that belongs to key 'norway'
print(europe['norway'])

# 2.2 Dictionaries, Part 2

# Dictionary Manipulation (1)

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin', 'norway':'oslo' }

# Add italy to europe
europe['italy'] = 'rome'

# Print out italy in europe
print('italy' in europe)

# Add poland to europe
europe['poland'] = 'warsaw'

# Print europe
print(europe)

# Dictionary Manipulation (2)

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'bonn',
          'norway':'oslo', 'italy':'rome', 'poland':'warsaw',
          'australia':'vienna' }

# Update capital of germany
europe['germany'] = 'berlin'

# Remove australia
del(europe['australia'])

# Print europe
print(europe)

# Dictionariception

# Dictionary of dictionaries
europe = { 'spain': { 'capital':'madrid', 'population':46.77 },
           'france': { 'capital':'paris', 'population':66.03 },
           'germany': { 'capital':'berlin', 'population':80.62 },
           'norway': { 'capital':'oslo', 'population':5.084 } }


# Print out the capital of France
print(europe['france']['capital'])

# Create sub-dictionary data
data = { 'capital':'rome', 'population':59.83 }

# Add data to europe under key 'italy'
europe['italy'] = data

# Print europe
print(europe)

# 2.3 Pandas, Part 1

# Dictionary to DataFrame (1)

# Pre-defined lists
names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]

# Import pandas as pd
import pandas as pd

# Create dictionary my_dict with three key:value pairs: my_dict
my_dict = { 'country': names, 'drives_right': dr, 'cars_per_cap': cpc }

# Build a DataFrame cars from my_dict: cars
cars = pd.DataFrame(my_dict)

# Print cars
print(cars)

# Dictionary to DataFrame (2)

import pandas as pd

# Build cars DataFrame
names = ['United States', 'Australia', 'Japan', 'India', 'Russia', 'Morocco', 'Egypt']
dr =  [True, False, False, False, True, True, True]
cpc = [809, 731, 588, 18, 200, 70, 45]
cars_dict = { 'country':names, 'drives_right':dr, 'cars_per_cap':cpc }
cars = pd.DataFrame(cars_dict)
print(cars)

# Definition of row_labels
row_labels = ['US', 'AUS', 'JPN', 'IN', 'RU', 'MOR', 'EG']

# Specify row labels of cars
cars.index = row_labels

# Print cars again
print(cars)

# CSV to DataFrame (1)

# Import pandas as pd
import pandas as pd

# Import the cars.csv data: cars
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname)

# Print out cars
print(cars)

# CSV to DataFrame (2)

# Import pandas as pd
import pandas as pd

# Fix import by including index_col
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Print out cars
print(cars)

# 2.4 Pandas, Part 2

# Square Brackets (1) - specify column labels

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Print out country column as Pandas Series
print(cars['country'])

# Print out country column as Pandas DataFrame
print(cars[['country']])

# Print out DataFrame with country and drives_right columns
print(cars[['country', 'drives_right']])

# Square Brackets (2)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Print out first 3 observations
print(cars[0:3])

# Print out fourth, fifth and sixth observation
print(cars[3:6])

# loc and iloc (1) - specify row labels

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)
print(cars)
# Print out observation for Japan
print(cars.loc["JAP"])
print(cars.iloc[2])

# Print out observations for Australia and Egypt
print(cars.loc[["AUS", "EG"]])
print(cars.iloc[[0, 6]])

# loc and iloc (2) - specify row and column labels

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Print out drives_right value of Morocco
print(cars.loc['MOR','drives_right'])

# Print sub-DataFrame
print(cars.loc[['RU', 'MOR'], ['country', 'drives_right']])

# loc and iloc (3) - specify row and column labels

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Print out drives_right column as Series
print(cars.loc[:, 'drives_right'])

# Print out drives_right column as DataFrame
print(cars.loc[:, ['drives_right']])

# Print out cars_per_cap and drives_right as DataFrame
print(cars.loc[:, ['cars_per_cap', 'drives_right']])

"""## 3. Logic, Control Flow and Filtering"""

# 3.1 Comparison Operators

# Equality

# Comparison of booleans
True == False

# Comparison of integers
-5 * 15 != 75

# Comparison of strings
"pyscript" == "PyScript"

# Compare a boolean with an integer
True == 1

# Greater and less than

# Comparison of integers
x = -3 * 6
x >= -10

# Comparison of strings
y = "test"
"test" <= y

# Comparison of booleans
True > False

# Compare arrays

# Create arrays
import numpy as np
my_house = np.array([18.0, 20.0, 10.75, 9.50])
your_house = np.array([14.0, 24.0, 14.25, 9.0])

# my_house greater than or equal to 18
print(my_house >= 18)

# my_house less than your_house
print(my_house < your_house)

# 3.2 Boolean Operators

# and, or, not (1)

# Define variables
my_kitchen = 18.0
your_kitchen = 14.0

# my_kitchen bigger than 10 and smaller than 18?
print(my_kitchen > 10 and my_kitchen < 18)

# my_kitchen smaller than 14 or bigger than 17?
print(my_kitchen <14 or my_kitchen > 17)

# Double my_kitchen smaller than triple your_kitchen?
print(my_kitchen * 2 < your_kitchen * 3)

"""```
x = 8
y = 9
not(not(x < 3) and not(y > 14 or y > 10))
```

What will the result be if you execute these three commands in the IPython Shell?
NB: Notice that not has a higher priority than and and or, it is executed first.

- [ ] True
- [x] False
- [ ] Running these commands will result in an error.
"""

# Boolean operators with Numpy

# Create arrays
import numpy as np
my_house = np.array([18.0, 20.0, 10.75, 9.50])
your_house = np.array([14.0, 24.0, 14.25, 9.0])

# my_house greater than 18.5 or smaller than 10
print(np.logical_or(my_house > 18.5, my_house < 10))

# Both my_house and your_house smaller than 11
print(np.logical_and(my_house < 11, your_house < 11))

"""- 3.3 if, elif, else
- Warmup

```
area = 10.0
if(area < 9) :
    print("small")
elif(area < 12) :
    print("medium")
else :
    print("large")
```

What will the output be if you run this piece of code in the IPython Shell?

- [ ] small
- [x] medium
- [ ] large
- [ ] The syntax is incorrect; this code will produce an error.

"""

# if

# Define variables
room = "kit"
area = 14.0

# if statement for room
if room == "kit" :
    print("looking around in the kitchen.")

# if statement for area
if area > 15 :
    print("big place!")

# Add else

# Define variables
room = "kit"
area = 14.0

# if-else construct for room
if room == "kit" :
    print("looking around in the kitchen.")
else :
    print("looking around elsewhere.")

# if-else construct for area
if area > 15 :
    print("big place!")
else  :
    print("pretty small.")

# Customize further: elif

# Define variables
room = "bed"
area = 14.0

# if-elif-else construct for room
if room == "kit" :
    print("looking around in the kitchen.")
elif room == "bed":
    print("looking around in the bedroom.")
else :
    print("looking around elsewhere.")

# if-elif-else construct for area
if area > 15 :
    print("big place!")
elif area > 10:
    print("medium size, nice!")
else :
    print("pretty small.")

# 3.4 Filtering pandas DataFrames

# Driving right (1)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Extract drives_right column as Series: dr
dr = cars['drives_right']
# US      True
# AUS    False
# JAP    False
# IN     False
# RU      True
# MOR     True
# EG      True

# Use dr to subset cars: sel
sel = cars[dr]

# Print sel
print(sel)

# Driving right (2)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Convert code to a one-liner
sel = cars[cars['drives_right']]

# Print sel
print(sel)

# Cars per capita (1)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Create car_maniac: observations that have a cars_per_cap over 500
cpc = cars['cars_per_cap']
# US     809
# AUS    731
# JAP    588
# IN      18
# RU     200
# MOR     70
# EG      45

many_cars = cpc > 500
# US      True
# AUS     True
# JAP     True
# IN     False
# RU     False
# MOR    False
# EG     False

car_maniac = cars[many_cars]

# Print car_maniac
print(car_maniac)

# Cars per capita (2)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Import numpy, you'll need this
import numpy as np

# Create medium: observations with cars_per_cap between 100 and 500
cpc = cars['cars_per_cap']
# US     809
# AUS    731
# JAP    588
# IN      18
# RU     200
# MOR     70
# EG      45

between = np.logical_and(cpc > 100, cpc < 500)
# US     False
# AUS    False
# JAP    False
# IN     False
# RU      True
# MOR    False
# EG     False

medium = cars[between]

# Print medium
print(medium)

"""## 4. Loops

- 4.1 while loop
- while: warming up

The while loop is like a repeated if statement. The code is executed over and over again, as long as the condition is True. Have another look at its recipe.

```
while condition :
    expression
```

Can you tell how many printouts the following while loop will do?

```
x = 1
while x < 4 :
    print(x)
    x = x + 1
```

- [ ] 0
- [ ] 1
- [ ] 2
- [x] 3
- [ ] 4
"""

# Basic while loop

# Initialize offset
offset = 8

# Code the while loop
while offset > 0:
    print('correcting...')
    offset = offset - 1
    print(offset)

# Add conditionals

# Initialize offset
offset = -6

# Code the while loop
while offset != 0 :
    print("correcting...")
    if offset > 0 :
      offset = offset - 1
    else : 
      offset = offset + 1    
    print(offset)

# 4.2 for loop

# Loop over a list

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Code the for loop
for item in areas:
   print(item)

# Indexes and values (1)

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Change for loop to use enumerate() and update print()
for index, a in enumerate(areas) :
    print('room ' + str(index) + ': ' + str(a))

# Indexes and values (2)

# areas list
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Code the for loop
for index, area in enumerate(areas) :
    print("room " + str(index+1) + ": " + str(area))

# Loop over list of lists

# house list of lists
house = [["hallway", 11.25], 
         ["kitchen", 18.0], 
         ["living room", 20.0], 
         ["bedroom", 10.75], 
         ["bathroom", 9.50]]
         
# Build a for loop from scratch
for area in house:
   print('the ' + area[0] + ' is ' + str(area[1]) + ' sqm')

# 4.3 Loop Data Structures Part 1

# Loop over dictionary

# Definition of dictionary
europe = {'spain':'madrid', 'france':'paris', 'germany':'berlin',
          'norway':'oslo', 'italy':'rome', 'poland':'warsaw', 'austria':'vienna' }
          
# Iterate over europe
for key, value in europe.items():
    print('the capital of ' + key + ' is ' + value)

# Loop over Numpy array

import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/baseball.csv'
baseball = pd.read_csv(fname)
np_height = baseball['Height'].to_numpy()
np_baseball = baseball[['Height', 'Weight']].to_numpy()

# Import numpy as np
import numpy as np

# For loop over np_height
for height in np_height:
    print(str(height) + ' inches')

# For loop over np_baseball
for baseball in np.nditer(np_baseball):
    print(baseball)

# 4.4 Loop Data Structures Part 2

# Loop over DataFrame (1)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Iterate over rows of cars
for car, row in cars.iterrows() :
    print(car)
    print(row)

# Loop over DataFrame (2)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Adapt for loop
for car, row in cars.iterrows() :
    print(car + ': ' + str(row['cars_per_cap']))

# Add column (1)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Code for loop that adds COUNTRY column
for car, row in cars.iterrows() :
    cars.loc[car, "COUNTRY"] = row["country"].upper()

# Print cars
print(cars)

# Add column (2)

# Import cars data
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/main/datasets/cars.csv'
cars = pd.read_csv(fname, index_col = 0)

# Use .apply(str.upper)
cars["COUNTRY"] = cars["country"].apply(str.upper)

# Print cars
print(cars)

"""## 5. Case Study: Hacker Statistics"""

# 5.1 Random Numbers

# Random float

# Import numpy as np
import numpy as np

# Set the seed
np.random.seed(123)

# Generate and print random float
print(np.random.rand())

# Roll the dice

# Import numpy and set seed
import numpy as np
np.random.seed(123)

# Use randint() to simulate a dice
print(np.random.randint(1,7))

# Use randint() again
print(np.random.randint(1,7))

# Determine your next move

# Numpy is imported, seed is set

# Starting step
step = 50

# Roll the dice
dice = np.random.randint(1, 7)

# Finish the control construct
if dice <= 2 :
    step = step - 1
elif dice >= 3 and dice <= 5 :
    step = step + 1
else :
    step = step + np.random.randint(1,7)

# Print out dice and step
print(dice, step)

# 5.2 Random Walk

# The next step

# Numpy is imported, seed is set

# Initialize random_walk
random_walk = [0]

# Complete the ___
for x in range(100) :
    # Set step: last element in random_walk
    step = random_walk[-1]

    # Roll the dice
    dice = np.random.randint(1,7)

    # Determine next step
    if dice <= 2:
        step = step - 1
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    # append next_step to random_walk
    random_walk.append(step)

# Print random_walk
print(random_walk)

# How low can you go?

# Numpy is imported, seed is set

# Initialize random_walk
random_walk = [0]

for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        # Replace below: use max to make sure step can't go below 0
        step = max(0, step - 1)
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

print(random_walk)

# Visualize the walk

# Numpy is imported, seed is set

# Initialization
random_walk = [0]

for x in range(100) :
    step = random_walk[-1]
    dice = np.random.randint(1,7)

    if dice <= 2:
        step = max(0, step - 1)
    elif dice <= 5:
        step = step + 1
    else:
        step = step + np.random.randint(1,7)

    random_walk.append(step)

# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Plot random_walk
plt.plot(random_walk)

# Show the plot
plt.show()

# 5.3 Distribution

# Simulate multiple walks

# Numpy is imported; seed is set

# Initialize all_walks (don't change this line)
all_walks = []

# Simulate random walk 10 times
for i in range(10) :

    # Code from before
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)

        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        random_walk.append(step)

    # Append random_walk to all_walks
    all_walks.append(random_walk)

# Print all_walks
print(all_walks)

# Visualize all walks

# numpy and matplotlib imported, seed set.

# initialize and populate all_walks
all_walks = []
for i in range(10) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        random_walk.append(step)
    all_walks.append(random_walk)

# Convert all_walks to Numpy array: np_aw
np_aw = np.array(all_walks)

# Plot np_aw and show
plt.plot(np_aw)
plt.show()

# Clear the figure
plt.clf()

# Transpose np_aw: np_aw_t
np_aw_t = np.transpose(np_aw)

# Plot np_aw_t and show
plt.plot(np_aw_t)
plt.show()

# Implement clumsiness

# numpy and matplotlib imported, seed set

# Simulate random walk 250 times
all_walks = []
for i in range(250) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)

        # Implement clumsiness
        if np.random.rand() <= 0.001 :
            step = 0

        random_walk.append(step)
    all_walks.append(random_walk)

# Create and plot np_aw_t
np_aw_t = np.transpose(np.array(all_walks))
plt.plot(np_aw_t)
plt.show()

# Plot the distribution

# numpy and matplotlib imported, seed set

# Simulate random walk 500 times
all_walks = []
for i in range(500) :
    random_walk = [0]
    for x in range(100) :
        step = random_walk[-1]
        dice = np.random.randint(1,7)
        if dice <= 2:
            step = max(0, step - 1)
        elif dice <= 5:
            step = step + 1
        else:
            step = step + np.random.randint(1,7)
        if np.random.rand() <= 0.001 :
            step = 0
        random_walk.append(step)
    all_walks.append(random_walk)

# Create and plot np_aw_t
np_aw_t = np.transpose(np.array(all_walks))

# Select last row from np_aw_t: ends
ends = np.array(np_aw_t[-1])

# Plot histogram of ends, display plot
plt.hist(ends)
plt.show()

"""- Calculate the odds

The histogram of the previous exercise was created from a Numpy array ends, that contains 500 integers. Each integer represents the end point of a random walk. To calculate the chance that this end point is greater than or equal to 60, you can count the number of integers in ends that are greater than or equal to 60 and divide that number by 500, the total number of simulations.

Well then, what's the estimated chance that you'll reach 60 steps high if you play this Empire State Building game? The ends array is everything you need; it's available in your Python session so you can make calculations in the IPython Shell.

- [ ] 48.8%
- [ ] 73.9%
- [x] 78.4%
- [ ] 95.9%
"""