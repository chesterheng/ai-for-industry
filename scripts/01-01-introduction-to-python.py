# -*- coding: utf-8 -*-
"""01-introduction-to-python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12oiizFQKHqmXQS0dkhE-d-PrO6kMaTw1

#Introduction to Python
## 1. Python Basics
## 2. Python Lists
## 3. Functions
## 4. NumPy

## 1. Python Basics
"""

# 1.1 Hello Python!

# Division
print(5 / 8)

# Addition
print(7 + 10)

"""When to use Python?
- [ ] You want to do some quick calculations.
- [ ] For your new business, you want to develop a database-driven website.
- [ ] Your boss asks you to clean and analyze the results of the latest satisfaction survey.
- [x] All of the above.
"""

# Python as a calculator

# Addition, subtraction
print(5 + 5)
print(5 - 5)

# Multiplication, division, modulo, and exponentiation
print(3 * 5)
print(10 / 2)
print(18 % 7)
print(4 ** 2)

# How much is your $100 worth after 7 years?
print (1.1 ** 7 * 100)

# 1.2 Variables and Types

# Variable Assignment

# Create a variable savings
savings = 100

# Print out savings
print(savings)

# Calculations with variables

# Create a variable savings
savings = 100

# Create a variable growth_multiplier
growth_multiplier = 1.1

# Calculate result
result = savings * growth_multiplier ** 7

# Print out result
print(result)

# Other variable types

# Create a variable desc
desc = "compound interest"

# Create a variable profitable
profitable = True

# Guess the type
a = 1.1
b = "Hello World"
c = True
print(type(a))
print(type(b))
print(type(c))

"""Guess the type

- [ ] a is of type int, b is of type str, c is of type bool
- [ ] a is of type float, b is of type bool, c is of type str
- [x] a is of type float, b is of type str, c is of type bool
- [ ] a is of type int, b is of type bool, c is of type str
"""

# Operations with other types

savings = 100
growth_multiplier = 1.1
desc = "compound interest"

# Assign product of growth_multiplier and savings to year1
year1 = savings * growth_multiplier

# Print the type of year1
print(type(year1))

# Assign sum of desc and desc to doubledesc
doubledesc = desc + desc

# Print out doubledesc
print(doubledesc)

# Type conversion

# Definition of savings and result
savings = 100
result = 100 * 1.10 ** 7

# Fix the printout
print("I started with $" + str(savings) + " and now have $" + str(result) + ". Awesome!")

# Definition of pi_string
pi_string = "3.1415926"

# Convert pi_string into float: pi_float
pi_float = float(pi_string)

"""Which one of these will throw an error?

- [ ] "I can add integers, like " + str(5) + " to strings."
- [ ] "I said " + ("Hey " * 2) + "Hey!"
- [x] "The correct answer to this multiple choice exercise is answer number " + 2
- [ ] True + False

## 2. Python Lists
"""

# 2.1 Python Lists

# Create a list

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# Create list areas
my_list = [hall, kit, liv, bed, bath]

# Print areas
print(my_list)

# Create list with different types

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# Adapt list areas
areas = ["hallway", hall, "kitchen", kit, "living room", liv, "bedroom", bed, "bathroom", bath]

# Print areas
print(areas)

"""Can you tell which ones of the following lines of Python code are valid ways to build a list?

A. [1, 3, 4, 2] B. [[1, 2, 3], [4, 5, 7]] C. [1 + 2, "a" * 5, 3]

- [x] A, B and C
- [ ] B
- [ ] B and C
- [ ] C
"""

# List of lists

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# house information as list of lists
house = [["hallway", hall],
         ["kitchen", kit],
         ["living room", liv],
         ["bedroom", bed],
         ["bathroom", bath]]

# Print out house
print(house)

# Print out the type of house
print(type(house))

# 2.2 Subsetting Lists

# Subset and conquer

# Create the areas list
areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]

# Print out second element from areas
print(areas[1])

# Print out last element from areas
print(areas[9])

# Print out the area of the living room
print(areas[5])

# Subset and calculate

# Create the areas list
areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]

# Sum of kitchen and bedroom area: eat_sleep_area
eat_sleep_area = areas[3] + areas[7]

# Print the vaariable eat_sleep_area
print(eat_sleep_area)

# Slicing and dicing

# Create the areas list
areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]

# Use slicing to create downstairs
downstairs = areas[:6]

# Use slicing to create upstairs
upstairs = areas[6:10]

# Print out downstairs and upstairs
print(downstairs)
print(upstairs)

# Alternative slicing to create downstairs
downstairs = areas[:6]

# Alternative slicing to create upstairs
upstairs = areas[6:]

"""`house = 
[['hallway', 11.25],
 ['kitchen', 18.0],
 ['living room', 20.0],
 ['bedroom', 10.75],
 ['bathroom', 9.5]]
`

What will house[-1][1] return?
- [ ] A float: the kitchen area
- [ ] A string: "kitchen"
- [x] A float: the bathroom area
- [ ] A string: "bathroom"
"""

# 2.3 Python Lists

# Replace list elements

# Create the areas list
areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]

# Correct the bathroom area
areas[-1] = 10.50

# Change "living room" to "chill zone"
areas[4] = "chill zone"

# Extend a list

# Create the areas list and make some changes
areas = ["hallway", 11.25, "kitchen", 18.0, "chill zone", 20.0,
         "bedroom", 10.75, "bathroom", 10.50]

# Add poolhouse data to areas, new list is areas_1
areas_1 = areas + ["poolhouse", 24.5]

# Add garage data to areas_1, new list is areas_2
areas_2 = areas_1 + ["garage", 15.45]

"""`areas = ["hallway", 11.25, "kitchen", 18.0,
        "chill zone", 20.0, "bedroom", 10.75,
         "bathroom", 10.50, "poolhouse", 24.5,
         "garage", 15.45]
`

The amount you won with the lottery is not that big after all and it looks like the poolhouse isn't going to happen. You decide to remove the corresponding string and float from the areas list.
Which of the code chunks will do the job for us?

- [ ] del(areas[10]); del(areas[11])
- [ ] del(areas[10:11])
- [x] del(areas[-4:-2])
- [ ] del(areas[-3]); del(areas[-4])
"""

# Inner workings of lists

# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Create areas_copy
areas_copy = list(areas)

# Change areas_copy
areas_copy[0] = 5.0

# Print areas
print(areas)

"""## 3. Functions"""

# 3.1 Functions

# Familiar functions

# Create variables var1 and var2
var1 = [1, 2, 3, 4]
var2 = True

# Print out type of var1
print(type(var1))

# Print out length of var1
print(len(var1))

# Convert var2 to an integer: out2
out2 = int(var2)

"""Use the Shell to open up the documentation on complex(). 
Which of the following statements is true?

- [ ] complex() takes exactly two arguments: real and [, imag].
- [ ] complex() takes two arguments: real and imag. Both these arguments are required.
- [x] complex() takes two arguments: real and imag. real is a required argument, imag is an optional argument.
- [ ] complex() takes two arguments: real and imag. If you don't specify imag, it is set to 1 by Python.
"""

# Multiple arguments

# Create lists first and second
first = [11.25, 18.0, 20.0]
second = [10.75, 9.50]

# Paste together first and second: full
full = first + second

# Sort full in descending order: full_sorted
full_sorted = sorted(full, reverse=True)

# Print out full_sorted
print(full_sorted)

# 3.2 Methods

# String Methods

# string to experiment with: place
place = "poolhouse"

# Use upper() on place: place_up
place_up = place.upper()

# Print out place and place_up
print(place)
print(place_up)

# Print out the number of o's in place
print(place.count("o"))

# List Methods

# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Print out the index of the element 20.0
print(areas.index(20))

# Print out how often 9.50 appears in areas
print(areas.count(9.5))

# Use append twice to add poolhouse and garage size
areas.append(24.5)
areas.append(15.45)

# Print out areas
print(areas)

# Reverse the orders of the elements in areas
areas.reverse()

# Print out areas
print(areas)

# 3.3 Packages

# Import package

# Definition of radius
r = 0.43

# Import the math package
import math

# Calculate C
C = 2 * math.pi * r

# Calculate A
A = math.pi * r ** 2

# Build printout
print("Circumference: " + str(C))
print("Area: " + str(A))

# Selective import

# Definition of radius
r = 192500

# Import radians function of math package
from math import radians

# Travel distance of Moon over 12 degrees. Store in dist.
dist = r * radians(12)

# Print out dist
print(dist)

"""`my_inv([[1,2], [3,4]])`

Which import statement will you need in order to run the above code without an error?

- [ ] import scipy
- [ ] import scipy.linalg
- [ ] from scipy.linalg import my_inv
- [ ] from scipy.linalg import inv as my_inv

## 4. NumPy
"""

# 4.1 Numpy

# Your First NumPy Array

# Create list baseball
baseball = [180, 215, 210, 210, 188, 176, 209, 200]

# Import the numpy package as np
import numpy as np

# Create a numpy array from baseball: np_baseball
np_baseball = np.array(baseball)
print(np_baseball)
# Print out type of np_baseball
print(type(np_baseball))

# Baseball players' height

# height is available as a regular list
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/master/datasets/baseball.csv'
data = pd.read_csv(fname)
height_in = data['Height']

# Import numpy
import numpy as np

# Create a numpy array from height_in: np_height_in
np_height_in = np.array(height_in)

# Print out np_height_in
print(np_height_in)

# Convert np_height_in to m: np_height_m
np_height_m = np_height_in * 0.0254

# Print np_height_m
print(np_height_m)

# Baseball player's BMI

# height and weight are available as regular lists
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/master/datasets/baseball.csv'
data = pd.read_csv(fname)
height_in = data['Height']
weight_lb = data['Weight']

# Import numpy
import numpy as np

# Create array from height_in with metric units: np_height_m
np_height_m = np.array(height_in) * 0.0254

# Create array from weight_lb with metric units: np_weight_kg
np_weight_kg = np.array(weight_lb) * 0.453592

# Calculate the BMI: bmi
bmi = np_weight_kg / np_height_m ** 2

# Print out bmi
print(bmi)

# Lightweight baseball players

# height and weight are available as a regular lists

# Import numpy
import numpy as np

# Calculate the BMI: bmi
np_height_m = np.array(height_in) * 0.0254
np_weight_kg = np.array(weight_lb) * 0.453592
bmi = np_weight_kg / np_height_m ** 2

# Create the light array
light = bmi < 21

# Print out light
print(light)

# Print out BMIs of all baseball players whose BMI is below 21
print(bmi[light])

"""`np.array([True, 1, 2]) + np.array([3, 4, False])`

Can you tell which code chunk builds the exact same Python object?

- [ ] np.array([True, 1, 2, 3, 4, False])
- [x] np.array([4, 3, 0]) + np.array([0, 2, 2])
- [ ] np.array([1, 1, 2]) + np.array([3, 4, -1])
- [ ] np.array([0, 1, 2, 3, 4, 5])
"""

# Subsetting NumPy Arrays

# height and weight are available as a regular lists

# Import numpy
import numpy as np

# Store weight and height lists as numpy arrays
np_weight_lb = np.array(weight_lb)
np_height_in = np.array(height_in)

# Print out the weight at index 50
print(np_weight_lb[50])

# Print out sub-array of np_height_in: index 100 up to and including index 110
print(np_height_in[100:111])

# 4.2 2D Numpy Arrays

# Your First 2D NumPy Array

# Create baseball, a list of lists
baseball = [[180, 78.4],
            [215, 102.7],
            [210, 98.5],
            [188, 75.2]]

# Import numpy
import numpy as np

# Create a 2D numpy array from baseball: np_baseball
np_baseball = np.array(baseball)

# Print out the type of np_baseball
print(type(np_baseball))

# Print out the shape of np_baseball
print(np_baseball.shape)

# Baseball data in 2D form

# baseball is available as a regular list of lists
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/master/datasets/baseball.csv'
baseball = pd.read_csv(fname, usecols = ['Height', 'Weight'])

# Import numpy package
import numpy as np

# Create a 2D numpy array from baseball: np_baseball
np_baseball = np.array(baseball)

# Print out the shape of np_baseball
print(np_baseball.shape)

# Subsetting 2D NumPy Arrays

# baseball is available as a regular list of lists

# Import numpy package
import numpy as np

# Create np_baseball (2 cols)
np_baseball = np.array(baseball)

# Print out the 50th row of np_baseball
print(np_baseball[49])

# Select the entire second column of np_baseball: np_weight_lb
np_weight_lb = np_baseball[:,1]

# Print out height of 124th player
print(np_baseball[123][0])

# 2D Arithmetic

# Import numpy package
import numpy as np

# baseball is available as a regular list of lists
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/master/datasets/baseball.csv'
baseball = pd.read_csv(fname, usecols = ['Height', 'Weight', 'Age'])

# updated is available as 2D numpy array
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/master/datasets/update.csv'
updated = np.array(pd.read_csv(fname, header = None))

# Create np_baseball (3 cols)
np_baseball = np.array(baseball)

# Print out addition of np_baseball and updated
print(np_baseball + updated)

# Create numpy array: conversion
conversion = [0.0254, 0.453592, 1]

# Print out product of np_baseball and conversion
print(np_baseball * conversion)

# 4.3 Numpy: Basic Statistics

# Average versus median

# np_baseball is available

# Import numpy
import numpy as np

# Create np_height_in from np_baseball
np_height_in = np.array(np_baseball[:,0])

# Print out the mean of np_height_in
print(np.mean(np_height_in))

# Print out the median of np_height_in
print(np.median(np_height_in))

# Explore the baseball data

# np_baseball is available

# Import numpy
import numpy as np

# Print mean height (first column)
avg = np.mean(np_baseball[:,0])
print("Average: " + str(avg))

# Print median height. Replace 'None'
med = np.median(np_baseball[:,0])
print("Median: " + str(med))

# Print out the standard deviation on height.
stddev = np.std(np_baseball[:,0])
print("Standard Deviation: " + str(stddev))

# Print out correlation between first and second column.
corr = np.corrcoef(np_baseball[:,0], np_baseball[:,1])
print("Correlation: " + str(corr))

# Blend it all together

# heights and positions are available as lists
import pandas as pd
fname = 'https://raw.githubusercontent.com/chesterheng/ai-for-industry/master/datasets/fifa.csv'
fifa =  pd.read_csv(fname, skipinitialspace=True, usecols=['position', 'height'])
positions = fifa.position
heights = fifa.height

# Import numpy
import numpy as np

# Convert positions and heights to numpy arrays: np_positions, np_heights
np_positions = np.array(positions)
np_heights = np.array(heights)

# Heights of the goalkeepers: gk_heights
gk_heights = np_heights[np_positions == 'GK']

# Heights of the other players: other_heights
other_heights = np_heights[np_positions != 'GK']

# Print out the median height of goalkeepers. Replace 'None'
print("Median height of goalkeepers: " + str(np.median(gk_heights)))

# Print out the median height of other players. Replace 'None'
print("Median height of other players: " + str(np.median(other_heights)))